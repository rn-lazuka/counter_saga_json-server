{"version":3,"sources":["components/Display/Display.module.css","components/Settings/Settings.module.css","components/Counter/Counter.module.css","components/Display/Display.tsx","components/Counter/Counter.tsx","components/Settings/Settings.tsx","store/actions/counterActions.ts","api/api.ts","store/reducers/counterReducer.ts","App.tsx","reportWebVitals.ts","store/reducers/index.ts","store/store.ts","index.tsx"],"names":["module","exports","Display","props","counterClass","currentValue","maxValue","s","classForMax","normalDisplay","settingsClass","classForSet","classForError","normalText","className","display","settings","Counter","btn_container","disabled","onClick","changeValue","startValue","onResetPush","onSetPush","Settings","field","input","onChange","onSetStartValue","type","value","onSetMaxValue","addNewSettings","counterActions","data","payload","instance","axios","create","baseURL","api","get","then","res","newValue","patch","getSettingsWorkerSaga","changeNumberWorkerSaga","setSettingsWorkerSaga","initialState","call","put","action","App","state","number","changeNumber","setState","e","newStartValue","Number","currentTarget","newMaxValue","changeSettings","this","getSettings","React","Component","connect","counter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","rootWatcher","sagaMiddleWare","createSagaMiddleware","middleware","store","createStore","applyMiddleware","takeEvery","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c1c53ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__1FDus\",\"classForMax\":\"Display_classForMax__1v5Of\",\"classForError\":\"Display_classForError__1eviD\",\"normalDisplay\":\"Display_normalDisplay__1dbah\",\"normalText\":\"Display_normalText__xUVKh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn_container\":\"Settings_btn_container__32o6m\",\"field\":\"Settings_field__20jzG\",\"input\":\"Settings_input__tAYN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn_container\":\"Counter_btn_container__3jYV3\"};","import React from 'react'\r\nimport s from './Display.module.css'\r\n\r\ninterface Props {\r\n  currentValue: number | string,\r\n  classForSet: boolean,\r\n  settings: boolean,\r\n  maxValue: number\r\n}\r\n\r\nconst Display = (props: Props) => {\r\n  let counterClass = props.currentValue === props.maxValue ? s.classForMax : s.normalDisplay\r\n  let settingsClass = props.classForSet ? s.classForError :  s.normalText\r\n\r\n  return (\r\n    <div className={s.display}>\r\n      <div className={props.settings?settingsClass:counterClass}>\r\n        {props.currentValue}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\r\nimport s from './Counter.module.css'\r\n\r\ninterface Props {\r\n  currentValue: number,\r\n  startValue: number\r\n  maxValue: number\r\n  changeValue: (number: number) => void\r\n  onResetPush: () => void\r\n  onSetPush: () => void\r\n}\r\n\r\nconst Counter = (props: Props) => {\r\n\r\n  return (\r\n    <div className={s.btn_container}>\r\n      <button disabled={props.currentValue === props.maxValue}\r\n              className={'btn'}\r\n              onClick={() => props.changeValue(+1)}\r\n      >\r\n        {props.currentValue === props.maxValue ? 'Max' : `+1 (${props.currentValue + 1})`}\r\n      </button>\r\n      <button disabled={props.currentValue === props.startValue}\r\n              className={'btn'}\r\n              onClick={() => props.changeValue(-1)}\r\n      >\r\n        {props.currentValue === props.startValue ? 'Min' : `-1 (${props.currentValue - 1})`}\r\n      </button>\r\n      <button disabled={props.currentValue === props.startValue} className={'btn'} onClick={props.onResetPush}>\r\n        Reset\r\n      </button>\r\n      <button className={'btn'} onClick={props.onSetPush}>\r\n        Settings\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Counter\r\n","import React, {ChangeEvent} from 'react'\r\nimport s from './Settings.module.css'\r\n\r\ninterface Props {\r\n  startValue: number\r\n  maxValue: number\r\n  classForSet: boolean\r\n  onSetStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  onSetMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  addNewSettings: () => void\r\n}\r\n\r\nconst Settings = (props: Props) => {\r\n\r\n  return (\r\n    <div className={s.btn_container}>\r\n     <span className={s.field}>\r\n       StartValue: <input className={s.input}\r\n                          onChange={props.onSetStartValue}\r\n                          type={'number'}\r\n                          value={props.startValue}/>\r\n             </span>\r\n      <span className={s.field}>\r\n        MaxValue: <input className={s.input}\r\n                         onChange={props.onSetMaxValue}\r\n                         type={'number'}\r\n                         value={props.maxValue}/>\r\n      </span>\r\n      <button className={'btn'} onClick={props.addNewSettings} disabled={props.classForSet}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import {InferActionsTypes} from '../store'\r\nimport {ICurrentValue, ISettingsValue} from '../../entities/entities'\r\n\r\nexport type CounterActionType = InferActionsTypes<typeof counterActions>\r\n\r\nexport const counterActions = {\r\n  changeNumber: (data: ICurrentValue) => ({type: 'SET-NUMBER', payload: data} as const),\r\n  getSettings: (data: ISettingsValue) => ({type: 'GET-SETTINGS', payload: data} as const),\r\n  setSettings: (data: ISettingsValue) => ({type: 'SET-SETTINGS', payload: data} as const)\r\n}\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {ICurrentValue, ISettingsValue} from \"../entities/entities\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:3004/counter\"\r\n});\r\n\r\nexport const api = {\r\n    getCurrentSettings() {\r\n        return instance.get<ISettingsValue>(\"\").then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    changeCurrentValue(newValue:ICurrentValue) {\r\n        return instance.patch<ICurrentValue>(\"\",newValue).then(res => {\r\n            return {currentValue:res.data.currentValue}\r\n        })\r\n    },\r\n    changeSettings(newValue:ISettingsValue) {\r\n        return instance.patch<ISettingsValue>(\"\",newValue).then(res => {\r\n            return res.data\r\n        })\r\n    }\r\n}\r\n","import {call, put} from 'redux-saga/effects'\r\nimport {counterActions, CounterActionType} from '../actions/counterActions'\r\nimport {api} from '../../api/api'\r\nimport {ICurrentValue, ISettingsValue} from '../../entities/entities'\r\n\r\nconst initialState = {\r\n  currentValue: 0,\r\n  startValue: 0,\r\n  maxValue: 0\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state = initialState, action: CounterActionType): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SET-NUMBER' :\r\n    case 'GET-SETTINGS' :\r\n    case 'SET-SETTINGS' :\r\n      return {\r\n        ...state, ...action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const getSettings = () => ({type: 'SETTINGS-QUERY'})\r\nexport const changeNumber = (data: ICurrentValue) => ({type: 'CHANGE-NUMBER', payload: data})\r\nexport const changeSettings = (data: ISettingsValue) => ({type: 'CHANGE-SETTINGS', payload: data})\r\n\r\nexport function* getSettingsWorkerSaga() {\r\n  const res = yield call(api.getCurrentSettings)\r\n  yield put(counterActions.getSettings(res))\r\n}\r\n\r\nexport function* changeNumberWorkerSaga(action: ReturnType<typeof changeNumber>) {\r\n  const res = yield call(api.changeCurrentValue, action.payload)\r\n  yield put(counterActions.changeNumber(res))\r\n}\r\n\r\nexport function* setSettingsWorkerSaga(action:  ReturnType<typeof changeSettings>) {\r\n  const res = yield call(api.changeSettings, action.payload)\r\n  yield put(counterActions.setSettings(res))\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react'\nimport './App.css'\nimport {connect} from 'react-redux'\nimport Display from './components/Display/Display'\nimport Counter from './components/Counter/Counter'\nimport Settings from './components/Settings/Settings'\nimport {RootState} from './store/reducers'\nimport {getSettings, changeNumber, changeSettings} from './store/reducers/counterReducer'\nimport {ICurrentValue, ISettingsValue} from './entities/entities'\n\ninterface IMSTP {\n  currentValue: number\n  startValue: number\n  maxValue: number\n}\n\ninterface IMDTP {\n  getSettings: () => void\n  changeNumber: (newValue: ICurrentValue) => void\n  changeSettings: (newValue: ISettingsValue) => void\n}\n\nclass App extends React.Component<IMSTP & IMDTP> {\n\n  state = {\n    startValue: 0,\n    maxValue: 0,\n    currentValue: '',\n    settings: false,\n    classForSet: false\n  }\n\n  componentDidMount(): void {\n    this.props.getSettings()\n  };\n\n  changeValue = (number: number): void => {\n    let newValue = {currentValue: this.props.currentValue + number}\n    if (newValue.currentValue <= this.props.maxValue && newValue.currentValue >= this.props.startValue) {\n      this.props.changeNumber(newValue)\n    }\n  }\n\n  onResetPush = (): void => {\n    if (this.props.currentValue !== this.props.startValue) {\n      this.props.changeNumber({currentValue: this.props.startValue})\n    }\n  }\n\n  onSetPush = (): void => {\n    this.setState({\n      settings: true, classForSet: false, currentValue: 'enter values and press \\'Save\\'',\n      startValue: this.props.startValue, maxValue: this.props.maxValue\n    })\n  }\n\n  onSetStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n    let newStartValue = Number(e.currentTarget.value)\n    if (newStartValue < 0 || newStartValue >= this.state.maxValue) {\n      this.setState({startValue: newStartValue, currentValue: 'Incorrect value!', classForSet: true})\n    } else {\n      this.setState({\n        startValue: newStartValue,\n        currentValue: 'enter values and press \\'Save\\'',\n        classForSet: false\n      })\n    }\n  }\n\n  onSetMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n    let newMaxValue = Number(e.currentTarget.value)\n    if (newMaxValue <= this.state.startValue) {\n      this.setState({maxValue: newMaxValue, currentValue: 'Incorrect value!', classForSet: true})\n    } else {\n      this.setState({\n        maxValue: newMaxValue,\n        currentValue: 'enter values and press \\'Save\\'',\n        classForSet: false\n      })\n    }\n  }\n\n  addNewSettings = () => {\n    this.props.changeSettings({\n      currentValue: this.state.startValue,\n      startValue: this.state.startValue,\n      maxValue: this.state.maxValue\n    })\n    this.setState({classForSet: false, settings: false})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className={'container'}>\n          <Display classForSet={this.state.classForSet}\n                   maxValue={this.props.maxValue}\n                   settings={this.state.settings}\n                   currentValue={this.state.settings ? this.state.currentValue : this.props.currentValue}/>\n          {!this.state.settings\n            ? <Counter currentValue={this.props.currentValue}\n                       startValue={this.props.startValue}\n                       maxValue={this.props.maxValue}\n                       changeValue={this.changeValue}\n                       onResetPush={this.onResetPush}\n                       onSetPush={this.onSetPush}/>\n            : <Settings startValue={this.state.startValue}\n                        maxValue={this.state.maxValue}\n                        classForSet={this.state.classForSet}\n                        onSetStartValue={this.onSetStartValue}\n                        onSetMaxValue={this.onSetMaxValue}\n                        addNewSettings={this.addNewSettings}/>}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mstp = (state: RootState): IMSTP => {\n  return {\n    currentValue: state.counter.currentValue,\n    maxValue: state.counter.maxValue,\n    startValue: state.counter.startValue\n  }\n}\n\nexport default connect<IMSTP, IMDTP, {}, RootState>(mstp,\n  {getSettings, changeNumber, changeSettings})(App)\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\"\r\nimport { counterReducer } from \"./counterReducer\"\r\n\r\nconst rootReducer=combineReducers({\r\ncounter: counterReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer\r\n","import {applyMiddleware, createStore} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {takeEvery} from 'redux-saga/effects'\r\nimport rootReducer from './reducers'\r\nimport {changeNumberWorkerSaga, getSettingsWorkerSaga, setSettingsWorkerSaga} from './reducers/counterReducer'\r\n\r\nconst initialState = {}\r\nconst sagaMiddleWare = createSagaMiddleware()\r\nconst middleware = [sagaMiddleWare]\r\n\r\nconst store = createStore(rootReducer, initialState, (applyMiddleware(...middleware)))\r\n\r\ntype PropertiesType<T> = T extends { [ket: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [ket: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\nsagaMiddleWare.run(rootWatcher)\r\n\r\nfunction* rootWatcher() {\r\n  yield takeEvery('CHANGE-NUMBER', changeNumberWorkerSaga)\r\n  yield takeEvery('SETTINGS-QUERY', getSettingsWorkerSaga)\r\n  yield takeEvery('CHANGE-SETTINGS', setSettingsWorkerSaga)\r\n}\r\n\r\nexport default store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}